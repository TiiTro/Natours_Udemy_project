// in Sass you can also make notations with //, not only /*..*/

// some VARIABLES, variables can be used as many times as wanted

$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-grey-dark: #777;

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

/* set root values in the html-properties */
html {
  font-size: 62.5%;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 1.6rem;
  line-height: 1.7;
  color: $color-grey-dark;
  padding: 3rem; /* creates a nice frame for the whole page */
  box-sizing: border-box;
}

.header {
  height: 95vh; /* vh = viewport height */
  background-image: linear-gradient(
    to right bottom,
    rgba($color-primary-light, 0.8), /* in Sass you can use hexa-values w opacity, in reg CSS not */
    rgba($color-primary-dark, 0.8)),
    url(../img/hero.jpg);
  background-size: cover; /* fits the image to the viewport as well as possible */
  background-position: top;
  position: relative;

  /* Clipping out part of the background! */
  clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
}

.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.header__logo {
  height: 3.5rem;
}

.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  backface-visibility: hidden; /* If animation is shaky, this should be "hidden"! Defines if the background of an element visible or hidden for the user in transitions? */
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  margin-bottom: 6rem;
}

.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;

  animation-name: moveInLeft;
  animation-duration: 1s;
    animation-timing-function: ease-out;
}

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  letter-spacing: 1.74rem;
  font-weight: 700;

  animation-name: moveInRight;
  animation-duration: 1s;
  animation-timing-function: ease-out;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  80% {
    transform: translateX(1rem);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  80% {
    transform: translateX(-1rem);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}


@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem; /* rounded corners */
  transition: all .2s; /* simpler way of animation, makes the moves smoother for the button */
  position: relative;
}

.btn:hover {
  transform: translateY(-.3rem);
  box-shadow: 0 1rem 2rem rgba(0,0,0,.2);
}

.btn:active {
  transform: translateY(-.1rem);
  box-shadow: 0 .5rem 1rem rgba(0,0,0,.2);
}

.btn--white {
  background-color: #fff;
  color: $color-grey-dark;
}

/* an after:: pseudo creates a copy of the element and places it behind the original one except when it's hovered --> can make cool effects. */
.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute; /* needs a reference, so the .btn needs to have positon: "relative;" */
  top: 0%;
  left: 0%;
  z-index: -1;
  transition: all, .4s;
}

.btn-white::after {
  background-color: #fff;
}

.btn:hover::after {
  transform: scaleX(1.2) scaleY(1.5);
  opacity: 0;
}

.btn--animated {
  animation: moveInBottom .5s ease-out .75s;
  animation-fill-mode: backwards;
}
